; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "VDES-Controller"
#define MyAppVersion "0.0.4"
#define MyAppPublisher "GRAD"
#define MyAppURL "https://www.gla-rad.org/"
#define MyAppExeName "vdes-controller.exe"
#define MyAppIcoName "grad_small.ico"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{50C19226-816B-4C78-B253-67E2809AD1DB}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=..\LICENSE.md
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
OutputBaseFilename=vdescontrollerinstall
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\target\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\target\*.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyAppIcoName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIcoName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Registry]
Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "ENAV_CLOUD_CONFIG_URI"; ValueData: "{code:getENavCloudConfigUri}"; Flags: uninsdeletevalue
Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "ENAV_CLOUD_CONFIG_USERNAME"; ValueData: "{code:getENavCloudConfigUsername}"; Flags: uninsdeletevalue
Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "ENAV_CLOUD_CONFIG_PASSWORD"; ValueData: "{code:getENavCloudConfigPassword}"; Flags: uninsdeletevalue
Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "ENAV_CLOUD_CONFIG_BRANCH"; ValueData: "{code:getENavCloudConfigBranch}"; Flags: uninsdeletevalue
Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "SPRING_PROFILES_ACTIVE"; ValueData: "{code:getENavCloudConfigProfile}"; Flags: uninsdeletevalue

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
    Page: TInputQueryWizardPage;

const
  enavCloudConfigUriDefault = 'http://eureka.service.com/config/';
  enavCloudConfigUsernameDefault = 'config_user';
  enavCloudConfigBranchDefault = 'master';
  enavCloudConfigProfileDefault = 'prod';

procedure InitializeWizard();
begin
    // Create the page
    Page := CreateInputQueryPage(2,
      'e-Nav Cloud Config Configuration',
      'Enter the connection information for the e-Navigation Cloud Configuration',
      'Please specify the required details, then click Next.');

    // Add items (False means it's not a password edit)
    Page.Add('&Config URL:', False);
    Page.Add('&Username:', False);
    Page.Add('&Password:', True);
    Page.Add('&Branch:', False);
    Page.Add('&Profile:', False);

    // Set initial values (optional)
    Page.Values[0] := ExpandConstant(enavCloudConfigUriDefault);
    Page.Values[1] := ExpandConstant(enavCloudConfigUsernameDefault);
    Page.Values[2] := '';
    Page.Values[3] := ExpandConstant(enavCloudConfigBranchDefault);
    Page.Values[4] := ExpandConstant(enavCloudConfigProfileDefault);

end;

function getENavCloudConfigUri(Param: String): string;
begin
  Result := Page.Values[0];
end;

function getENavCloudConfigUsername(Param: String): string;
begin
  Result := Page.Values[1];
end;

function getENavCloudConfigPassword(Param: String): string;
begin
  Result := Page.Values[2];
end;

function getENavCloudConfigBranch(Param: String): string;
begin
  Result := Page.Values[3];
end;

function getENavCloudConfigProfile(Param: String): string;
begin
  Result := Page.Values[4];
end;
